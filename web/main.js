!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){e.exports=n(7)},function(e,t,n){},,,,,,function(e,t,n){"use strict";n.r(t);const o=()=>{const e=document.querySelectorAll("[data-nav-parent]");e&&e.length&&e.forEach(e=>{new class{constructor(e){this.element=e,this.parentId=this.element.dataset.navParent,this.childContainer=document.querySelector(`[data-nav-child="${this.parentId}"]`),this.open=!1,this.setChildOpen(this.open),this.element.addEventListener("click",this.onClick.bind(this))}onClick(e){console.log("click"),this.open=!this.open,this.setChildOpen(this.open),e.stopPropagation()}setChildOpen(e){e?this.childContainer.classList.add("Menu-item-subMenu--mobile-active"):this.childContainer.classList.remove("Menu-item-subMenu--mobile-active")}}(e)})};const i=()=>{const e=document.querySelectorAll("[data-filter]");e&&e.length&&e.forEach(e=>{switch(e.dataset.filter){case"cuisine":case"cost":new class{constructor(e,t){this.element=e,this.filterType=t,this.dataType=document.querySelector("[data-filter-data-type]").dataset.filterDataType,this.element.addEventListener("change",this.onChange.bind(this))}onChange(e){console.log(e.target);const t=e.target.selectedOptions[0].value,n=`/${this.dataType}/?${this.filterType}=${t}`;fetch(n,{credentials:"same-origin",headers:{"X-Requested-With":"XMLHttpRequest"}}).then(e=>e.text()).then(e=>{const t=document.querySelector(".ThingsToDo");t.innerHTML="",t.innerHTML=e})}}(e,e.dataset.filter);break;default:console.log("no match")}})};n(1);document.addEventListener("DOMContentLoaded",new class{constructor(){o(),i()}})}]);
//# sourceMappingURL=main.js.map